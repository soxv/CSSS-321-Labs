---
title: "CSSS/SOC/STAT 321: Lab 1"
subtitle: "Introduction to R/RStudio"
author: "Tao Lin"
office_hours: "Office Hours: Fri 1:30 - 3:30 PM Smith 35"
slides_url: "Section Slides URL: [soxv/CSSS-321-Labs](https://github.com/soxv/CSSS-321-Labs)"
format: 
  revealjs:
    template-partials: 
      - title-slide.html
    smaller: true
    scrollable: true
    self-contained: true
    slide-number: true
    reference-location: "document"
    link-external-icon: true
    link-external-newwindow: true
    footnotes-hover: true
    footer: "CSSS/SOC/STAT 321 Data Science and Statistics for Social Scicence I"
    logo: "https://csss.uw.edu/assets/csss-logo.png"
execute: 
  echo: true
  #eval: false
  warning: false
  message: false
filters:
  - reveal-auto-agenda
auto-agenda:
  bullets: bullets
  heading: Agenda
---

# Introduction

## Logistics

- Labs:
  - AC: Wed & Fri 11:30 am - 12:20 pm, Denny 213
  - AD: Wed & Fri 12:30 pm - 1:20 pm, Thompson 334
- Office Hours:
  - Fri 1:30 pm - 3:30 pm or by appointment, Smith 35
- The Goal of Labs
  - Review Course Materials, esp. readings and assignments.
  - Develop Coding Skills and Practices in `R`.
- Lab Materials are published at [https://github.com/soxv/CSSS-321-Labs](https://github.com/soxv/CSSS-321-Labs).
  - I also post slides on Canvas, but will sometimes update previous slides in the GitHub repo.

## Important Deadlines

- QSS Tutorials: due every Tuesday
- Problem Sets
  - Problem Set 1 (Randomized Experiments): April 16
  - Problem Set 2 (Summarizing Data): April 30
  - Problem Set 3 (Regression): May 21
  - Problem Set 4 (Inference): June 4
- Midterm: May 12
- Final Project
  - Proposals: April 21
  - (Initial) Analyses: May 19
  - Final Reports: June 7

## How to Look for Help?

- Use `help()` or `?` to check out function documentation.
- Just google the error message and find them on Stack Overflow or GitHub!
- New options in the AI era: [ChatGPT](https://chat.openai.com/chat) or [New Bing](https://www.bing.com/new)!
- We use Canvas discussion board for Q&A and troubleshooting
  - People encountering similar problems can see how to solve them (avoid "reinventing the wheel").
  - We encourage you to help your peers on the discussion board.
  - If you have questions that cannot be covered by one single post, please come to my office hours.

::: {layout-ncol=2}

![](./img/debugtime.png){width=350}

![](./img/stackoverflow.jpeg){width=350}

:::

---

### Minimal Reproducible Example (MRE)

- "minimal": "look in a smaller stack to find a needle"
  - inputs are small and simple
  - fewer packages loaded
  - fewer function calls
- "reproducible": provide code that someone else could run
- Use [`reprex`](https://reprex.tidyverse.org/) and [`datapasta`](https://milesmcbain.github.io/datapasta/) to generate MRE! (see [https://www.rstudio.com/resources/webinars/help-me-help-you-creating-reproducible-examples/](https://www.rstudio.com/resources/webinars/help-me-help-you-creating-reproducible-examples/))

---

## General Tips for Learning Programming Language

Treat the programming language as your second language.

- Most of your assignments require you to translate human language to programming language
- But output is more difficult than input for beginners.
- A more beginner-friendly exercise is to translate programming language to human language.
  - You can use `help()` or `?` to check the "dictionary" (helper documentation) of functions.
- Write a well-commented code (i.e. write down your translation of code); Name your variables meaningfully and [consistently](https://curc.readthedocs.io/en/latest/programming/coding-best-practices.html)
  - [The tidyverse style guide](https://style.tidyverse.org/)
- Fortunately, for those of you new to R, there are many resources to get you up to speed
  - Books: e.g. [Cowpertwait and Metcalfe (2009)](https://canvas.uw.edu/courses/1545365/files?preview=90198835), [Zuur et al. (2009)](https://canvas.uw.edu/courses/1545365/files?preview=90198814), [Wickham and Groleman (2017)](http://r4ds.had.co.nz/), etc.
  - Online Courses: e.g. [CSSS 508 Introduction to R for Social Scientists](https://clanfear.github.io/CSSS508/)
  - Interactive Tutorial within R: [`install.package(swirl)`](https://swirlstats.com/)
  - Interactive Tutorials Online: e.g. [DataCamp](https://app.datacamp.com/learn/skill-tracks/r-programming), [Codecademy](https://www.codecademy.com/courses/learn-r/lessons/introduction-to-r/exercises/why-r), etc.

---

## Potential Data Source for Your Final Project

- Awesome lists of public datasets in GitHub
  - [Awesome Public Datasets](https://github.com/awesomedata/awesome-public-datasets)
  - [Awesome collections on DataHub](https://github.com/datasets/awesome-data)
  - Just search "dataset" in GitHub!
- Comparative politics/world politics
  - Government: [World Economis and Politics (WEP)](https://ncgg.princeton.edu/wep/dataverse.html), [Quality of Government (QoG)](https://www.gu.se/en/quality-government/qog-data/data-downloads), [Variety of Democracy (V-Dem)](https://www.v-dem.net/), etc.
  - Survey: [World Value Survey (WVS)](https://www.worldvaluessurvey.org/wvs.jsp); [(Asian/Afro/Latino/...)Barometor Survey](https://www.globalbarometer.net/), etc.

---

## Introduce Yourself!

- What is your major / year?
- Why do you take this course?
- What is your experience with data science and R?

# R and RStudio

## What is `R`?

- A free and open-source language for statistical computing and graphics.
- How to install `R` from [CRAN (The Comprehensive R Archive Network)](https://cloud.r-project.org/).
  - Mac:
    - choose "R-4.2.3-arm64.pkg" for Apple silicon Macs (M1 or higher)
    - otherwise choose "R-4.2.3.pkg".
    - also install the Command Line Tools by typing `xcode-select --install` in your terminal if you haven't done so. It helps compile some `R` packages that rely on other languages such as C++ or Fortran.
  - Windows:
    - click "install R for the first time"
    - also click "RTools" and install it. Rtools can help compile some `R` packages that rely on other languages such as C++ or Fortran.
- Two components:
  - `R` console
    - run command on it to generate corresponding output.
    - analogy: musical instrument ðŸŽ»
  - `R` script:
    - record the command in plain text; easier for other people to circulate and reproduce your results.
    - analogy: written sheet music with notations ðŸŽ¼

## What is RStudio?

- An integrated development environment (IDE) for `R`. It includes:
  - `R` console
  - syntax-highlighting editor
  - tools for plotting, debugging, and workspace management
- TL;DR - RStudio provides various tools that makes `R` programming easier.
- Install RStudio from [Posit](https://posit.co/download/rstudio-desktop/).

## RStudio Setup

- Change Appearance and Pane Layout: `Tools` > `Global Options...` > `Appearance`/`Pane Layout`
- Donâ€™t save workspace to `.Rdata` on exit: `Tools` > `Global Options...` > `General` > "Save workspace to `.RData` on exit" > "Never"
- Donâ€™t restore `.Rdata` into workspace: `Tools` > `Global Options...` > `General` > uncheck "Restore `.RData` into workspace at startup"
  - Reloading a saved workspace may be convenient to you; but it makes your code less **reproducible** on other people's machine.

## Install Packages

- What is package?
  - a collection of R functions, compiled codes and datasets for reuse.
  - Important packages for this course:
    - `tidyverse`: a bundle of packages for data wrangling.
    - `rmarkdown`: write documents that embeds `R` code as well as its output.
    - `qsslearnr`: interactive tutorials for *Quantitative Social Science*
- Two actions
  - **Installing** package: download the package to your computer.
  - **Loading** package: tell `R` to use the package.
  - you only need to *install* once; but you need to *load* every time.
- Install packages from different sources
  - `install.packages("tidyverse")` downloads from CRAN by default.
  - `remotes::install_github("rstudio/learnr")` downloads from GitHub.
  - CRAN maintains packages with strict quality requirements by `R` core teams; GitHub maintains packages by individual developers or small teams that may not go through the same level of testing and quality control as CRAN packages.

---

```{r}
#| echo: true
#| eval: false

## Interactive Tutorials for Quantitative Social Science
## Written by Matthew Blackwell 
## See here: https://github.com/mattblackwell/qsslearnr

# 1. Install `remotes` package: install.packages("remotes")

## 2. Install the following packages by running:
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio-education/gradethis")
remotes::install_github("mattblackwell/qsslearnr")

## 3. See all available tutorials for QSS
learnr::run_tutorial(package = "qsslearnr")

## 4. Run a particular tutorial
learnr::run_tutorial("00-intro", package = "qsslearnr")

## 5. If you have problems generating PDF from Rmarkdown
## install tinytex by running (takes some time!): 
# install.packages("tinytex")
# tinytex::install_tinytex()

```

- For Mac users, sometimes the installation of `qss` package may fail because `pandoc` or `curl` is not installed or upgraded in your Mac (if you don't encounter these problems, no need to look at this!).
  - [`pandoc`](https://pandoc.org/) is used to convert documents to other types, e.g. convert `.html` to `.pdf` or `.docx`.
  - [`curl`](https://curl.se/) is used to transfer data through URLs.
  - To install or upgrade `pandoc` or `curl`, we can first install the package manager [Homebrew](https://brew.sh/), and then install them by using `brew install pandoc` or `brew install curl` in Mac Terminal.


---

# QSS Exercise

## QSS Tutorial 0

Any questions?

## Bias in Self-Reported Turnout

- Use `read.csv()` to load the voter turnout data
  - If your datasets are stored in other formats, such as `.xlsx`, `.sav` or `.dta`, you need external packages such as `readxl`, `foreign` or `haven` to help you load your datasets.
- File management practices in `R`
  - Option 1: Use `setwd()` to open target folder as current working directory in `R`.
  - Option 2: Open your target folder as an `R` project.
- In this exercise, we will also explore how to visualize data in `R` in two different ways:
  - R `base` graphics: require more code to generate plots, but is more flexible.
  - `ggplot2`: requires less code to generate plots, but is more restrictive, e.g. we need to transform the data before plotting.

---

|Variable|Description|
|---|---|
|`year`|election year|
|`ANES`|ANES estimated turnout rate|
|`VEP`|voting eligible population (in thousands)|
|`VAP`|voting age population (in thousands)|
|`total`|total ballots cast for highest office (in thousands)|
|`felons`|total ineligible felons (in thousands)|
|`noncitizens`|total noncitizens (in thousands)|
|`overseas`|total eligible overseas voters (in thousands)|
|`osvoters`|total ballots counted by overseas voters (in thousands)|

---

1. Load the data into `R` and check the dimensions of the data. Also, obtain a summary of the data. How many observations are there? What is the range of years covered in this data set?

```{r}

turnout <- read.csv("./data/turnout.csv") # load the dataset as a data.frame in R

dim(turnout) # the dimensions of the dataset: 14 rows (observations) x 9 columns (variables)
# we can also use `nrow()` to solely fetch the number of rows
# and `ncol()` to solely fetch the number of columns
head(turnout, n = 5) # the first 5 rows of the dataset
summary(turnout) # get the range and quartiles of each variable

turnout$year # we use `$` to get specific variables from the data.frame; this is a vector of year
# alternatively, we can use `turnout[, "year"]` to do the same thing.
length(turnout$year) # the length of `year` vector is 14.

```

---

2. Calculate the turnout rate based on the voting age population or VAP. Note that for this data set, we must add the total number of eligible overseas voters since the VAP variable does not include these individuals in the count. Next, calculate the turnout rate using the voting eligible population or VEP. What difference do you observe? (Additionally, how can we visualize the temporal change in this difference?)

```{r}

turnout$tr_vap <- turnout$total / (turnout$VAP + turnout$overseas) * 100
turnout$tr_vep <- turnout$total / turnout$VEP * 100
turnout$tr_vep - turnout$tr_vap
plot(
  tr_vep - tr_vap ~ year, # variable on y-axis ~ variable on x-axis
  data = turnout, # the dataset from which we extract variables for plotting
  type = "l", # the type of plot; we use lines to visualize the time series 
  xlab = "Year", ylab = "VEP-based TR - VAP-based TR (%)", # labels of x- and y-axis
  xaxt = "n" # override previous x-axis breaks
)
axis(
  side = 1, # redraw the breaks of x-axis to reflect four-year election cycle
  at = seq(1980, 2008, 4) # highlight presidential election year
)
```

---

3. Compute the differences between the VAP and ANES estimates of turnout rate. How big is the difference on average? What is the range of the differences? Conduct the same comparison for the VEP and ANES estimates of voter turnout. Briefly comment on the results.

```{r}

diff_vap <- turnout$ANES - turnout$tr_vap
summary(diff_vap)
diff_vep <- turnout$ANES - turnout$tr_vep
summary(diff_vep)
```

---

4. Compare the VEP turnout rate with the ANES turnout rate separately for presidential elections and midterm elections. Note that the data set excludes the year 2006. Does the bias of the ANES estimates vary across election types?

```{r}

turnout$midterm <- ifelse(turnout$year %% 4 != 0, 1, 0) # presidential elections take place in leap year (can be divided by 4); thus, we can use this fact to recognize the midterm election year
turnout$tr_vep[turnout$midterm == 0]
turnout$tr_vep[turnout$midterm == 1]
mean(turnout$tr_vep[turnout$midterm == 0]) - mean(turnout$tr_vep[turnout$midterm == 1])
```

---

5. Divide the data into half by election years such that you subset the data into two periods. Calculate the difference between the VEP turnout rate and the ANES turnout rate separately for each year within each period. Has the bias of ANES increased over time?

```{r}

diff_vep[1:7]
diff_vep[8:14]
mean(diff_vep[8:14]) - mean(diff_vep[1:7])
```


---

6. ANES does not interview prisoners and overseas voters. Calculate an adjustment to the 2008 VAP turnout rate. Begin by subtracting the total number of ineligible felons and noncitizens from the VAP to calculate an adjusted VAP. Next, calculate an adjusted VAP turnout rate, taking care to subtract the number of overseas ballots counted from the total ballots in 2008. Compare the adjusted VAP turnout with the unadjusted VAP, VEP, and the ANES turnout rate. Briefly discuss the results. (Additionally, how can we visualize the comparison among the 4 types of turnout rate?)

```{r}

turnout$adj_tr_vap <- (turnout$total - turnout$overseas) / (turnout$VAP - turnout$felons - turnout$noncit) * 100

# install.packages("tidyverse")
library(tidyverse)
turnout %>% # we use the pipe operator `%>%` to avoid repeatedly referring to the dataset in subsequent functions
  pivot_longer( # we use `pivot_longer()` to reshape data from wide form to long form, which is more efficient for visualization; see `vignette("pivot")`.
    c("tr_vap", "tr_vep", "ANES", "adj_tr_vap"), # we plan to convert these columns into one variable
    names_to = "type", values_to = "turnout_rate"
  ) %>%
  ggplot(aes(x = year, y = turnout_rate, group = type), data = .) +
    geom_line(aes(color = type)) +
    scale_x_continuous(breaks = seq(1980, 2008, 4)) + # redraw x-axis breaks to match presidential election cycle
    scale_color_discrete(name = "Type", labels = c("Adj. VAP", "ANES", "VAP", "VEP")) +
    labs(x = "Year", y = "Turnout Rate (%)") +
    theme_bw()

```


